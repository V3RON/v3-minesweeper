{"version":3,"sources":["webpack:///./components/Cell/UnknownCell/UnknownCell.tsx","webpack:///./components/Board/Board.tsx","webpack:///./components/Cell/Cell.tsx","webpack:///./components/Cell/BombCell/index.ts","webpack:///./components/Cell/FlagCell/FlagCell.tsx","webpack:///./components/Cell/BombCell/BombCell.tsx","webpack:///./components/Cell/FlagCell/index.ts","webpack:///./components/Board/index.ts","webpack:///./components/Cell/index.ts","webpack:///./pages/GamePage.tsx","webpack:///./components/Cell/ClearCell/ClearCell.tsx","webpack:///./components/Cell/ClearCell/index.ts","webpack:///./components/Cell/UnknownCell/index.ts"],"names":["UnknownCell","props","className","onClick","onRightClick","twCascade","Board","onCellSelect","onCellFlag","showBombs","board","useAppSelector","getBoard","map","row","cell","id","position","type","CellType","BOMB","key","flagged","discovered","value","bombsAroundCount","Cell","children","onContextMenu","event","preventDefault","FlagCell","BombCell","GamePage","dispatch","useAppDispatch","xRayMode","getXRayMode","toggleXRay","selectCell","flagCell","ClearCell","0","1","2","3","4","5","6","7","8","9"],"mappings":"iHAAA,0EAMaA,EAAmD,SAAAC,GAAS,IAChEC,EAAqCD,EAArCC,UAAWC,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,aAE5B,OACC,YAAC,IAAD,CACCF,UAAWG,oBAAU,mBAAoBH,GACzCC,QAASA,EACTC,aAAcA,M,sDCbjB,kGAQaE,EAAuC,SAAAL,GAAS,IACpDC,EAAmDD,EAAnDC,UAAWK,EAAwCN,EAAxCM,aAAcC,EAA0BP,EAA1BO,WAAYC,EAAcR,EAAdQ,UAEvCC,EAAQC,YAAeC,KAE7B,OACC,mBAAKV,UAAWG,oBAAU,iBAAkBH,IAC1CQ,EAAMG,KAAI,SAAAC,GAAG,OACb,uBACEA,EAAID,KAAI,SAAAE,GACR,IAAMC,EAAQD,EAAKE,SAAS,GAApB,IAA0BF,EAAKE,SAAS,GAEhD,OAAIR,GAAaM,EAAKG,OAASC,IAASC,KAChC,YAAC,WAAD,CAAUlB,UAAU,SAASmB,IAAKL,IAGtCD,EAAKO,QAEP,YAAC,WAAD,CACCD,IAAKL,EACLZ,aAAc,kBAAMI,EAAWO,EAAKE,aAKlCF,EAAKQ,WAUNR,EAAKG,OAAUC,IAASC,KACpB,YAAC,WAAD,CAAUC,IAAKL,IAGhB,YAAC,YAAD,CAAWK,IAAKL,EAAIQ,MAAOT,EAAKU,mBAZrC,YAAC,cAAD,CACCJ,IAAKL,EACLb,QAAS,kBAAMI,EAAaQ,EAAKE,WACjCb,aAAc,kBAAMI,EAAWO,EAAKE,uB,kCCtC7C,8DAKaS,EAAqC,SACjDzB,GACI,IACIC,EAA+CD,EAA/CC,UAAWyB,EAAoC1B,EAApC0B,SAAUxB,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,aAOtC,OACC,sBACCF,UAAWG,oBACV,qDACA,wBACA,iCACAH,GAEDC,QAASA,EACTyB,cAdyB,SAACC,GAC3BA,EAAMC,iBACM,MAAZ1B,KAAeyB,KAcbF,K,oCC1BJ,kO,sDCAA,0EAMaI,EAA6C,SAAA9B,GAAS,IAC1DC,EAA4BD,EAA5BC,UAAWE,EAAiBH,EAAjBG,aAEnB,OACC,YAAC,IAAD,CAAMF,UAAWG,oBAAU,GAAIH,GAAYE,aAAcA,GAAzD,Q,kCCVF,8DAKa4B,EAA6C,SAAA/B,GAAS,IAC1DC,EAAcD,EAAdC,UAER,OAAO,YAAC,IAAD,CAAMA,UAAWA,GAAjB,Q,kCCRR,sE,kCCAA,mE,kCCAA,ksB,kCCAA,+CA8Be+B,UAlBqB,WACnC,IAAMC,EAAWC,cACXC,EAAWzB,YAAe0B,KAEhC,OACC,mBAAKnC,UAAU,IACd,sBAAQgB,KAAK,SAASf,QAAS,kBAAM+B,EAASI,iBAA9C,QAGA,YAAC,QAAD,CACC/B,aAAc,SAAAU,GAAQ,OAAIiB,EAASK,YAAW,CAAEtB,eAChDT,WAAY,SAAAS,GAAQ,OAAIiB,EAASM,YAAS,CAAEvB,eAC5CR,UAAW2B,O,kCCxBf,sFAOaK,EAA+C,SAAAxC,GAAS,IAC5DC,EAAqBD,EAArBC,UAAWsB,EAAUvB,EAAVuB,MAyBnB,OACC,YAAC,IAAD,CACCtB,UAAWG,oBACV,CACC,gBAA2B,IAAVmB,EACjB,iBAA4B,IAAVA,EAClB,eAA0B,IAAVA,EAChB,gBAAiBA,EAAQ,GAE1B,WACAtB,IAvB2C,CAC7CwC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,OAgBa3B,M,sEC9ClB,gO,kCCAA","file":"2.chunk.cb234.js","sourcesContent":["import { h, FunctionComponent } from 'preact';\n\nimport { UnknownCellProps } from './UnknownCell.types';\nimport { Cell } from '../Cell';\nimport { twCascade } from '@mariusmarais/tailwind-cascade';\n\nexport const UnknownCell: FunctionComponent<UnknownCellProps> = props => {\n\tconst { className, onClick, onRightClick } = props;\n\n\treturn (\n\t\t<Cell\n\t\t\tclassName={twCascade('hover:shadow-2xl', className)}\n\t\t\tonClick={onClick}\n\t\t\tonRightClick={onRightClick}\n\t\t/>\n\t);\n};\n","import { FunctionComponent, h } from 'preact';\n\nimport { BombCell, ClearCell, UnknownCell } from '../Cell';\nimport { CellType, getBoard, useAppSelector } from '../../store';\nimport { BoardProps } from './Board.types';\nimport { FlagCell } from '../Cell/FlagCell';\nimport { twCascade } from '@mariusmarais/tailwind-cascade';\n\nexport const Board: FunctionComponent<BoardProps> = props => {\n\tconst { className, onCellSelect, onCellFlag, showBombs } = props;\n\n\tconst board = useAppSelector(getBoard);\n\n\treturn (\n\t\t<div className={twCascade('flex flex-wrap', className)}>\n\t\t\t{board.map(row => (\n\t\t\t\t<div>\n\t\t\t\t\t{row.map(cell => {\n\t\t\t\t\t\tconst id = `${cell.position[0]}:${cell.position[1]}`;\n\n\t\t\t\t\t\tif (showBombs && cell.type === CellType.BOMB) {\n\t\t\t\t\t\t\treturn <BombCell className=\"bg-red\" key={id} />;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (cell.flagged) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<FlagCell\n\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\tonRightClick={() => onCellFlag(cell.position)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!cell.discovered) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<UnknownCell\n\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\tonClick={() => onCellSelect(cell.position)}\n\t\t\t\t\t\t\t\t\tonRightClick={() => onCellFlag(cell.position)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (cell.type! === CellType.BOMB) {\n\t\t\t\t\t\t\treturn <BombCell key={id} />;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn <ClearCell key={id} value={cell.bombsAroundCount} />;\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n","import { h, FunctionComponent, RenderableProps } from 'preact';\nimport { twCascade } from '@mariusmarais/tailwind-cascade';\n\nimport { CellProps } from './Cell.types';\n\nexport const Cell: FunctionComponent<CellProps> = (\n\tprops: RenderableProps<CellProps>,\n) => {\n\tconst { className, children, onClick, onRightClick } = props;\n\n\tconst handleOnRightClick = (event: MouseEvent) => {\n\t\tevent.preventDefault();\n\t\tonRightClick?.(event);\n\t};\n\n\treturn (\n\t\t<button\n\t\t\tclassName={twCascade(\n\t\t\t\t'flex justify-center items-center w-8 h-8 font-bold',\n\t\t\t\t'bg-white shadow-inner',\n\t\t\t\t'select-none focus:outline-none',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tonClick={onClick}\n\t\t\tonContextMenu={handleOnRightClick}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n};\n","export * from './BombCell';\nexport * from './BombCell.types';\n","import { FunctionComponent, h } from 'preact';\nimport { twCascade } from '@mariusmarais/tailwind-cascade';\n\nimport { Cell } from '../Cell';\nimport { FlagCellProps } from './FlagCell.types';\n\nexport const FlagCell: FunctionComponent<FlagCellProps> = props => {\n\tconst { className, onRightClick } = props;\n\n\treturn (\n\t\t<Cell className={twCascade('', className)} onRightClick={onRightClick}>\n\t\t\tüö©\n\t\t</Cell>\n\t);\n};\n","import { h, FunctionComponent } from 'preact';\n\nimport { BombCellProps } from './BombCell.types';\nimport { Cell } from '../Cell';\n\nexport const BombCell: FunctionComponent<BombCellProps> = props => {\n\tconst { className } = props;\n\n\treturn <Cell className={className}>üí£</Cell>;\n};\n","export * from './FlagCell';\nexport * from './FlagCell.types';\n","export * from './Board';\nexport * from './Board.types';\n","export * from './ClearCell';\nexport * from './BombCell';\nexport * from './UnknownCell';\n","import { h, FunctionComponent } from 'preact';\n\nimport {\n\tflagCell,\n\tgetXRayMode,\n\tselectCell,\n\ttoggleXRay,\n\tuseAppDispatch,\n\tuseAppSelector,\n} from '../store';\nimport { Board } from '../components/Board';\n\nconst GamePage: FunctionComponent = () => {\n\tconst dispatch = useAppDispatch();\n\tconst xRayMode = useAppSelector(getXRayMode);\n\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<button type=\"button\" onClick={() => dispatch(toggleXRay())}>\n\t\t\t\tXray\n\t\t\t</button>\n\t\t\t<Board\n\t\t\t\tonCellSelect={position => dispatch(selectCell({ position }))}\n\t\t\t\tonCellFlag={position => dispatch(flagCell({ position }))}\n\t\t\t\tshowBombs={xRayMode}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default GamePage;\n","import { h, FunctionComponent } from 'preact';\nimport { useEffect } from 'preact/hooks';\n\nimport { ClearCellProps } from './ClearCell.types';\nimport { Cell } from '../Cell';\nimport { twCascade } from '@mariusmarais/tailwind-cascade';\n\nexport const ClearCell: FunctionComponent<ClearCellProps> = props => {\n\tconst { className, value } = props;\n\n\tif (process.env.NODE_ENV === 'development') {\n\t\tuseEffect(() => {\n\t\t\tif (value >= 0 && value < 9) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconsole.warn('[ClearCell] Value must be between 0 and 8!');\n\t\t}, [value]);\n\t}\n\n\tconst valueEmojiMap: Record<number, string> = {\n\t\t0: '0Ô∏è‚É£',\n\t\t1: '1Ô∏è‚É£',\n\t\t2: '2Ô∏è‚É£',\n\t\t3: '3Ô∏è‚É£',\n\t\t4: '4Ô∏è‚É£',\n\t\t5: '5Ô∏è‚É£',\n\t\t6: '6Ô∏è‚É£',\n\t\t7: '7Ô∏è‚É£',\n\t\t8: '8Ô∏è‚É£',\n\t\t9: '9Ô∏è‚É£',\n\t};\n\n\treturn (\n\t\t<Cell\n\t\t\tclassName={twCascade(\n\t\t\t\t{\n\t\t\t\t\t'text-blue-600': value === 1,\n\t\t\t\t\t'text-green-600': value === 2,\n\t\t\t\t\t'text-red-600': value === 3,\n\t\t\t\t\t'text-blue-900': value > 3,\n\t\t\t\t},\n\t\t\t\t'bg-white',\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t>\n\t\t\t{valueEmojiMap[value]}\n\t\t</Cell>\n\t);\n};\n","export * from './ClearCell';\nexport * from './ClearCell.types';\n","export * from './UnknownCell';\nexport * from './UnknownCell.types';\n"],"sourceRoot":""}